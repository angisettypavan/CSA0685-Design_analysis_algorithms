#include <stdio.h>
#include <stdbool.h>

#define V 4 // Change V to the number of vertices in your graph

// Function to check if it is safe to color the vertex with the given color
bool isSafe(int graph[V][V], int vertex, int color[], int c) {
    for (int i = 0; i < V; i++) {
        if (graph[vertex][i] && c == color[i])
            return false;
    }
    return true;
}

// Function to print the solution (colors assigned to vertices)
void printSolution(int color[]) {
    printf("Vertex Colors: ");
    for (int i = 0; i < V; i++) {
        printf("%d ", color[i]);
    }
    printf("\n");
}

// Function to solve the graph coloring problem using backtracking
bool graphColoringUtil(int graph[V][V], int m, int color[], int vertex) {
    if (vertex == V) {
        printSolution(color);
        return true;
    }

    for (int c = 1; c <= m; c++) {
        if (isSafe(graph, vertex, color, c)) {
            color[vertex] = c;
            if (graphColoringUtil(graph, m, color, vertex + 1))
                return true;
            color[vertex] = 0;
        }
    }

    return false;
}

// Function to solve the graph coloring problem
void graphColoring(int graph[V][V], int m) {
    int color[V];
    for (int i = 0; i < V; i++)
        color[i] = 0;

    if (!graphColoringUtil(graph, m, color, 0))
        printf("Solution does not exist with the given number of colors.\n");
}

int main() {
    // Modify the adjacency matrix of your graph here.
    int graph[V][V] = {
        {0, 1, 1, 1},
        {1, 0, 1, 0},
        {1, 1, 0, 1},
        {1, 0, 1, 0}
    };

    int m; // Number of colors available
    printf("Enter the number of colors available: ");
    scanf("%d", &m);

    graphColoring(graph, m);

    return 0;
}
