#include <stdio.h>
#include <stdbool.h>

#define MAX_ELEMENTS 100

// Function to print the subset that adds up to the given sum
void printSubset(int subset[], int subsetSize) {
    printf("Subset with the given sum: { ");
    for (int i = 0; i < subsetSize; i++) {
        printf("%d ", subset[i]);
    }
    printf("}\n");
}

// Function to find subsets with the given sum using backtracking
void subsetSumBacktracking(int set[], int n, int sum, int currentSum, int subset[], int subsetSize, int index, bool* found) {
    if (currentSum == sum) {
        *found = true;
        printSubset(subset, subsetSize);
        return;
    }

    for (int i = index; i < n; i++) {
        if (*found) {
            return;
        }

        if (currentSum + set[i] <= sum) {
            subset[subsetSize] = set[i];
            subsetSumBacktracking(set, n, sum, currentSum + set[i], subset, subsetSize + 1, i + 1, found);
        }
    }
}

// Function to solve the Subset Sum problem
void solveSubsetSum(int set[], int n, int sum) {
    int subset[MAX_ELEMENTS];
    bool found = false;

    subsetSumBacktracking(set, n, sum, 0, subset, 0, 0, &found);

    if (!found) {
        printf("No subset found with the given sum.\n");
    }
}

int main() {
    int n, sum;

    printf("Enter the number of elements in the set: ");
    scanf("%d", &n);

    int set[MAX_ELEMENTS];

    printf("Enter the elements of the set:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &set[i]);
    }

    printf("Enter the desired sum: ");
    scanf("%d", &sum);

    solveSubsetSum(set, n, sum);

    return 0;
}
